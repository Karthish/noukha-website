{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {\n    let buffer = [];\n    source.subscribe(new OperatorSubscriber(subscriber, value => {\n      buffer.push(value);\n      count < buffer.length && buffer.shift();\n    }, () => {\n      for (const value of buffer) {\n        subscriber.next(value);\n      }\n\n      subscriber.complete();\n    }, undefined, () => {\n      buffer = null;\n    }));\n  });\n}","map":{"version":3,"sources":["/Users/Noukha/noukha-website/node_modules/rxjs/dist/esm/internal/operators/takeLast.js"],"names":["EMPTY","operate","OperatorSubscriber","takeLast","count","source","subscriber","buffer","subscribe","value","push","length","shift","next","complete","undefined"],"mappings":"AAAA,SAASA,KAAT,QAAsB,qBAAtB;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,SAAOA,KAAK,IAAI,CAAT,GACD,MAAMJ,KADL,GAEDC,OAAO,CAAC,CAACI,MAAD,EAASC,UAAT,KAAwB;AAC9B,QAAIC,MAAM,GAAG,EAAb;AACAF,IAAAA,MAAM,CAACG,SAAP,CAAiB,IAAIN,kBAAJ,CAAuBI,UAAvB,EAAoCG,KAAD,IAAW;AAC3DF,MAAAA,MAAM,CAACG,IAAP,CAAYD,KAAZ;AACAL,MAAAA,KAAK,GAAGG,MAAM,CAACI,MAAf,IAAyBJ,MAAM,CAACK,KAAP,EAAzB;AACH,KAHgB,EAGd,MAAM;AACL,WAAK,MAAMH,KAAX,IAAoBF,MAApB,EAA4B;AACxBD,QAAAA,UAAU,CAACO,IAAX,CAAgBJ,KAAhB;AACH;;AACDH,MAAAA,UAAU,CAACQ,QAAX;AACH,KARgB,EAQdC,SARc,EAQH,MAAM;AAChBR,MAAAA,MAAM,GAAG,IAAT;AACH,KAVgB,CAAjB;AAWH,GAbQ,CAFb;AAgBH","sourcesContent":["import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n    return count <= 0\n        ? () => EMPTY\n        : operate((source, subscriber) => {\n            let buffer = [];\n            source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n                buffer.push(value);\n                count < buffer.length && buffer.shift();\n            }, () => {\n                for (const value of buffer) {\n                    subscriber.next(value);\n                }\n                subscriber.complete();\n            }, undefined, () => {\n                buffer = null;\n            }));\n        });\n}\n"]},"metadata":{},"sourceType":"module"}