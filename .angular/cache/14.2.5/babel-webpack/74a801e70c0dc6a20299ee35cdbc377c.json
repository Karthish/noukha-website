{"ast":null,"code":"import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n  flush(action) {\n    this._active = true;\n    this._scheduled = undefined;\n    const {\n      actions\n    } = this;\n    let error;\n    let index = -1;\n    action = action || actions.shift();\n    const count = actions.length;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this._active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/Noukha/noukha-website/node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js"],"names":["AsyncScheduler","AsapScheduler","flush","action","_active","_scheduled","undefined","actions","error","index","shift","count","length","execute","state","delay","unsubscribe"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAO,MAAMC,aAAN,SAA4BD,cAA5B,CAA2C;AAC9CE,EAAAA,KAAK,CAACC,MAAD,EAAS;AACV,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,UAAL,GAAkBC,SAAlB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAc,IAApB;AACA,QAAIC,KAAJ;AACA,QAAIC,KAAK,GAAG,CAAC,CAAb;AACAN,IAAAA,MAAM,GAAGA,MAAM,IAAII,OAAO,CAACG,KAAR,EAAnB;AACA,UAAMC,KAAK,GAAGJ,OAAO,CAACK,MAAtB;;AACA,OAAG;AACC,UAAKJ,KAAK,GAAGL,MAAM,CAACU,OAAP,CAAeV,MAAM,CAACW,KAAtB,EAA6BX,MAAM,CAACY,KAApC,CAAb,EAA0D;AACtD;AACH;AACJ,KAJD,QAIS,EAAEN,KAAF,GAAUE,KAAV,KAAoBR,MAAM,GAAGI,OAAO,CAACG,KAAR,EAA7B,CAJT;;AAKA,SAAKN,OAAL,GAAe,KAAf;;AACA,QAAII,KAAJ,EAAW;AACP,aAAO,EAAEC,KAAF,GAAUE,KAAV,KAAoBR,MAAM,GAAGI,OAAO,CAACG,KAAR,EAA7B,CAAP,EAAsD;AAClDP,QAAAA,MAAM,CAACa,WAAP;AACH;;AACD,YAAMR,KAAN;AACH;AACJ;;AArB6C","sourcesContent":["import { AsyncScheduler } from './AsyncScheduler';\nexport class AsapScheduler extends AsyncScheduler {\n    flush(action) {\n        this._active = true;\n        this._scheduled = undefined;\n        const { actions } = this;\n        let error;\n        let index = -1;\n        action = action || actions.shift();\n        const count = actions.length;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}