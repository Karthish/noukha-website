{"ast":null,"code":"import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function onErrorResumeNext(...sources) {\n  const nextSources = argsOrArgArray(sources);\n  return operate((source, subscriber) => {\n    const remaining = [source, ...nextSources];\n\n    const subscribeNext = () => {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          let nextSource;\n\n          try {\n            nextSource = innerFrom(remaining.shift());\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          const innerSub = new OperatorSubscriber(subscriber, undefined, noop, noop);\n          subscriber.add(nextSource.subscribe(innerSub));\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}","map":{"version":3,"sources":["/Users/Noukha/noukha-website/node_modules/rxjs/dist/esm/internal/operators/onErrorResumeNext.js"],"names":["operate","innerFrom","argsOrArgArray","OperatorSubscriber","noop","onErrorResumeNext","sources","nextSources","source","subscriber","remaining","subscribeNext","closed","length","nextSource","shift","err","innerSub","undefined","add","subscribe","complete"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAO,SAASC,iBAAT,CAA2B,GAAGC,OAA9B,EAAuC;AAC1C,QAAMC,WAAW,GAAGL,cAAc,CAACI,OAAD,CAAlC;AACA,SAAON,OAAO,CAAC,CAACQ,MAAD,EAASC,UAAT,KAAwB;AACnC,UAAMC,SAAS,GAAG,CAACF,MAAD,EAAS,GAAGD,WAAZ,CAAlB;;AACA,UAAMI,aAAa,GAAG,MAAM;AACxB,UAAI,CAACF,UAAU,CAACG,MAAhB,EAAwB;AACpB,YAAIF,SAAS,CAACG,MAAV,GAAmB,CAAvB,EAA0B;AACtB,cAAIC,UAAJ;;AACA,cAAI;AACAA,YAAAA,UAAU,GAAGb,SAAS,CAACS,SAAS,CAACK,KAAV,EAAD,CAAtB;AACH,WAFD,CAGA,OAAOC,GAAP,EAAY;AACRL,YAAAA,aAAa;AACb;AACH;;AACD,gBAAMM,QAAQ,GAAG,IAAId,kBAAJ,CAAuBM,UAAvB,EAAmCS,SAAnC,EAA8Cd,IAA9C,EAAoDA,IAApD,CAAjB;AACAK,UAAAA,UAAU,CAACU,GAAX,CAAeL,UAAU,CAACM,SAAX,CAAqBH,QAArB,CAAf;AACAA,UAAAA,QAAQ,CAACE,GAAT,CAAaR,aAAb;AACH,SAZD,MAaK;AACDF,UAAAA,UAAU,CAACY,QAAX;AACH;AACJ;AACJ,KAnBD;;AAoBAV,IAAAA,aAAa;AAChB,GAvBa,CAAd;AAwBH","sourcesContent":["import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function onErrorResumeNext(...sources) {\n    const nextSources = argsOrArgArray(sources);\n    return operate((source, subscriber) => {\n        const remaining = [source, ...nextSources];\n        const subscribeNext = () => {\n            if (!subscriber.closed) {\n                if (remaining.length > 0) {\n                    let nextSource;\n                    try {\n                        nextSource = innerFrom(remaining.shift());\n                    }\n                    catch (err) {\n                        subscribeNext();\n                        return;\n                    }\n                    const innerSub = new OperatorSubscriber(subscriber, undefined, noop, noop);\n                    subscriber.add(nextSource.subscribe(innerSub));\n                    innerSub.add(subscribeNext);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        };\n        subscribeNext();\n    });\n}\n"]},"metadata":{},"sourceType":"module"}